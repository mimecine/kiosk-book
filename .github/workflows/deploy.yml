name: Deploy to GitHub Pages

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branchâ€™s name
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - name: Install, build, and upload your site
        uses: withastro/action@v2
        # with:
          # path: . # The root location of your Astro project inside the repository. (optional)
          # node-version: 20 # The specific version of Node that should be used to build your site. Defaults to 20. (optional)
          # package-manager: pnpm@latest # The Node package manager that should be used to install dependencies and build your site. Automatically detected based on your lockfile. (optional)

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # pdf:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Wait for GitHub Pages
  #       run: sleep 60  # Give GitHub Pages time to deploy and be accessible
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Configure Git
  #       run: |
  #         git config --global user.email "github-actions[bot]@users.noreply.github.com"
  #         git config --global user.name "github-actions[bot]"
      
  #     - name: Download deployed site content
  #       run: |
  #         SITE_URL="${{ needs.deploy.outputs.page_url }}"
  #         # Remove trailing slash if present
  #         SITE_URL=${SITE_URL%/}
  #         # Download the deployed site content
  #         wget -r -np -nH --cut-dirs=1 "$SITE_URL"
          
  #     - name: Generate PDF from deployed site
  #       uses: docker://yeslogic/prince:16
  #       with:
  #         args: ${{ needs.deploy.outputs.page_url }} -o book.pdf
          
  #     - name: Upload PDF artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: book-pdf
  #         path: book.pdf
          
  #     - name: Deploy PDF with site content
  #       uses: actions/deploy-pages@v4
  #       with:
  #         path: '.'

