---
import { getCollection } from "astro:content";

import { Image } from "astro:assets";
import { marked } from "marked";
import D from "../assets/archive.kioskkiosk.json";

const title = "KIOSK: The Book";
const exhibit_sample = 1000;
const product_sample = 1000;

let pIndex = 1;
let products = (await getCollection("products"))
  .filter((p) => p.data.status == "active" && p.data.images?.length)
  .map((p) => {
    p.rendered = marked.parse(p.body);
    p.rendered = wrapLinks(p.rendered);
    return p;
  })
  .sort((a, b) => a.data.title.localeCompare(b.data.title));

const groups = Object.groupBy(products, ({ data }) => data.product_type);

const products_by_material = {};
products.forEach((p) => {
  p.data.materials_array.forEach((m) => {
    if (!products_by_material[m]) products_by_material[m] = [];
    products_by_material[m].push(p);
  });
});

const exhibits = [
  "The later years",
  "Italy 2",
  "Italy 1",
  "Romania",
  "Recall",
  "Greece",
  "Holiday 2013",
  "Lend a Hand",
  "The Netherlands",
  "Obama 2012",
  "Colombia",
  "India #2",
  "America #4",
  "India",
  "Japan #2",
  "America #3",
  "Iceland",
  "Groundhog Day",
  "Portugal",
  "Provence",
  "America #2",
  "9 for 2009",
  "America #1",
  "Hong Kong",
  "8 Things",
  "Finland",
  "Germany",
  "Mexico",
  "Sweden",
  "Japan",
]
  .reverse()
  .slice(0, exhibit_sample || 1000);

const pages = D.Pages.filter((p) => p.title.startsWith("BOOK:")).map((p) => {
  [p.prefix, p.before_exhibit, p.clean_title] = p.title
    .split(":")
    .map((t) => t.trim());
  p.body_html = wrapLinks(p.body_html);
  return p;
});

function wrapLinks(inputString) {
  var R1 =
    /\s(https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&//=]*))([\s<.,!?]?)/gim;
  var R2 =
    />https?:\/\/(?:www\.)?([-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6})\b(?:[-a-zA-Z0-9()@:%_\+.~#?&//=]*)</gim;
  return inputString
    .replace(R1, ' <a href="$1">$1</a>$2')
    .replace(R2, ' class="footnote">$1<');
}

var initial = null;
function newInitial(word) {
  if (word[0]?.match(/[a-zA-Z]/) && word[0] != initial) {
    console.log("new initial ", word[0]);
    initial = word[0];
    return initial;
  }
  return false;
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <style is:inline type="text/notused">
      html {
        hyphens: auto;
        font-size: 9pt;
        color: var(--color);
        font-family: "Courier New", Courier, monospace;
        font-family: 'Times New Roman', Times, serif;
        height: 100%;
      }
      * {
        box-sizing: border-box;
      }
      body {
        height: 100%;
        counter-reset: chapter;
      }

      .essay,
      .exhibit {
        p {
          margin-bottom: 1rem;
        }
      }
      p:last-of-type {
        margin-bottom: inherit;
      }

      a.footnote::after {
        float: footnote page;
        footnote-style-position: inside;

        content: "" attr(href) "";
        font-size: 90%;
        font-style: italic;
      }
      ::footnote-marker,
      ::footnote-call {
        content: counter(footnote, asterisks);
      }

      section {
        page: section;
        column-count: 3;
        column-gap: 2em;
        page-break-after: always;
        string-set: head-title "";
      }

      @page {
        size: A4;
        margin-top: 0.25in;
        margin-bottom: 0.25in;
        margin-left: 0.25in;
        margin-right: 0.25in;
        border: 2pt double black;
        padding: 2rem;

        counter-reset: footnote;

        @footnote {
          border-top: 1pt solid red; /* The Border Top is the footnote rule */
        }
      }
      @page :right {
        margin-left: 0.85in;
        @bottom-right {
          content: "" counter(page) "";
          font-size: 70%;
          font-family: Helvetica;
          font-weight: bold;
        }
        @top-right {
          content: "" string(head-title, first-except) "";
          font-size: 70%;
          font-family: Helvetica;
          font-weight: bold;
          text-transform: uppercase;
          letter-spacing: 0.1ch;
        }
      }
      @page :left {
        margin-right: 0.85in;
        @bottom-left {
          content: "" counter(page) "";
          font-size: 70%;
          font-family: Helvetica;
          font-weight: bold;
        }
        @top-left {
          content: "" string(head-title, first-except) "";
          font-size: 70%;
          font-family: Helvetica;
          font-weight: bold;
          text-transform: uppercase;
          letter-spacing: 0.1ch;
        }
      }
      @page cleanpage:left {
        border: none;
        @bottom-left {
          content: " " !important;
        }
      }
      @page cleanpage:right {
        border: none;
        @bottom-right {
          content: " " !important;
        }
      }

      @page exhibit {
        counter-increment: page;
      }
      @page exhibit:first {
        counter-reset: page;
      }
      @page essay {
        border-left: none;
        border-right: none;
      }

      .essay {
        page: essay;
        column-span: all;
        -x-min-height: 4in;
        margin: 0.5in 1in;
      }
      .cleanpage {
        page: cleanpage;
      }

      h2.title {
        font-size: xx-large;
        font-family: Helvetica, "Helvetica Neue", sans-serif;
        font-weight: bold;
        margin-bottom: 2rem;
        string-set: head-title content();
      }
      h2 {
        color: red;
      }

      .subtitle,
      .p_title {
        hyphens: none;
      }
      .meta {
        font-size: 80%;
        margin-bottom: 1rem;
        break-inside: avoid;
      }
      .meta > * {
        padding-bottom: 0.3em;
      }

      .p_materials {
        font-style: italic;
      }

      .p_provenance {
        font-weight: bold;
        text-transform: uppercase;
      }

      .p_description {
        /* clear:both; */
        /* padding-top: 1em; */
      }
      .p_description > p {
        /* clear: both; */
        /* margin-bottom: 1rem; */
      }

      a {
        color: black;
        text-decoration: underline;
        hyphens: none;
      }
      a.xref {
        display: block;
        text-decoration: none;
        width: 100%;
        border-bottom: 0.8pt dotted black;
      }
      @media print {
        a.xref:after {
          content: "Pg. " target-counter(attr(href url), page);
          float: right;
        }
        a.img-xref:after {
          content: "" target-counter(attr(href url), page);
        }
      }

      .group:after {
        content: "";
        display: table;
        clear: both;
      }
      @media print {
        astro-dev-toolbar {
          display: none;
        }
      }
      @media screen {
        main {
          margin: 0.5in;
          width: 8in;
          border: 2pt double black;
          font-size: 16p;
          padding: 2rem;
          position: relative;
        }
        .essay::before,
        .exhibit::before,
        .index::before {
          content: "- - - - - - - - - - - - - - - - [page] - - - - - - - - - - - - - - - - - - -";
          display: block;
          column-span: all;
          text-align: center;
          width: 100%;
          margin: 0.2in 0;
          font-size: initial;
          font-weight: initial;
          font-family: initial;
          color: gray;
        }
      }
    </style></head
  >

  <body class="font-mono text-gray-900 bg-gray-100">
    <main>
      <div class="plainflow" style="columns:2; column-gap: 3rem; column-fill:auto;">
        <div
          class="cover cleanpage"
          style="page: cleanpage; font-size:36pt; column-span:all; font-family: Helvetica, 'Helvetica Neue', sans-serif; font-weight: bold; display: block; height: 100vh; border-top: 3pt solid black; border-bottom: 3pt solid black; margin: 0; padding-top: 10mm;"
        >
          <h1>KIOSK: Things from places</h1>
        </div>

        {
          exhibits.map((exhibit) => (
            <>
              {pages.find((p) => p.before_exhibit == exhibit) != null && (
                <div class="essay">
                  <h2
                    class="title"
                    set:html={
                      pages.find((p) => p.before_exhibit == exhibit).clean_title
                    }
                  />
                  <div
                    set:html={wrapLinks(
                      pages.find((p) => p.before_exhibit == exhibit).body_html
                    )}
                  />
                </div>
              )}
              <div
                class="exhibit"
                style="position: relative; font-size:large; column-span:all; font-family: Helvetica, 'Helvetica Neue', sans-serif; font-weight: bold; display: block; height: 2.5in; border-bottom: 3pt solid black; break-before: page; page-break-before: always; margin: 10mm 0;"
              >
                <h2 class="title">
                  {exhibit}
                  <a
                    id={exhibit}
                    name={exhibit}
                    style="position:absolute; top:-2rem;"
                  />
                </h2>
                <div
                  class="subtitle"
                  set:html={
                    D.SmartCollections.find((p) => p.title == exhibit)
                      ?.body_html || ""
                  }
                />
              </div>

              {groups[exhibit]
                ?.slice(0, product_sample || 1000)
                .map((product) => (
                  <>
                    <div
                      class="product"
                      style="padding-bottom:1rem; margin-bottom: 2.5rem; overflow:auto; position:relative;"
                    >
                      <a
                        id={product.data.handle}
                        style="position:absolute; top:-2rem;"
                        data-rendered={(product._rendered = true)}
                        data-index={(product._index = pIndex++)}
                      />
                      {product.data.images[0] && (
                        <div class="inline-block float-right w-2/5">
                      </div>
                      )}
                      <h3
                        class="p_title"
                        style="font-family: sans-serif; font-weight:bold; text-transform:uppercase;"
                      >
                        {product.data.title}
                      </h3>
                      <span class="p_dimensions">
                        {product.data.dimensions}
                      </span>
                      <br />
                      <span class="p_materials" style="font-style: italic;">
                        {product.data.materials}
                      </span>
                      <br />
                      <span
                        class="p_provenance"
                        style="text-transform:uppercase; display:block; position: relative"
                      >
                        {product.data.provenance}
                      </span>
                      <br />
                      <br />
                      <span
                        class="p_description"
                        set:html={wrapLinks(product.rendered)}
                        style="orphans:4; widows:4;"
                      />
                      <div style="text-align: right; color: red; font-weight: bold; padding-right:1rem;">
                        ~ <a class="img-xref italic text-[0.7rem]" href={`#img-${product.data.handle}`}>Fig. {product._index}, Pg.</a>
                      </div>
                    </div>
                  </>
                ))}
            </>
          ))
        }
      </div>

      <section
        class="index cleanpage"
        style="column-count: 2; page: cleanpage;"
      >
        <h2
          class="xexhibit"
          style="font-size:xx-large; column-span:all; font-family: Helvetica, 'Helvetica Neue', sans-serif; font-weight: bold; display: block; height: 2.5in; border-bottom: 3pt solid black; break-before: page; margin: 10mm 0; string-set: exhibit content();"
        >
          The Index: Alphabetical
        </h2>

        {
          products
            .filter((p) => p._rendered)
            .map((p) => (
              <>
                {newInitial(p.data.title) && (
                  <a
                    class="font-bold mt-4"
                    style="color:red; border-bottom: 1px dotted black; width: 100%; display: block;"
                  >
                    {p.data.title[0].toUpperCase()}
                  </a>
                )}

                <a class="xref" href={`#${p.data.handle}`}>
                  {p.data.title}
                </a>
              </>
            ))
        }
      </section>

      <section
        class="index cleanpage"
        style="column-count: 2; page: cleanpage;"
      >
        <h2
          class="xexhibit"
          style="font-size:xx-large; column-span:all; font-family: Helvetica, 'Helvetica Neue', sans-serif; font-weight: bold; display: block; height: 2.5in; border-bottom: 3pt solid black; break-before: page; margin: 10mm 0; string-set: exhibit content();"
        >
          The Index: By Exhibit
        </h2>
        {
          exhibits.map((exhibit) => (
            <>
              <a
                class="xref column font-bold mt-4"
                href={`#${exhibit}`}
                style="column-span: all; color: red"
              >
                {exhibit}
              </a>
              {groups[exhibit]
                ?.filter((p) => p._rendered)
                .map((p) => (
                  <a class="xref" href={`#${p.data.handle}`}>
                    {p.data.title}
                  </a>
                ))}
            </>
          ))
        }
      </section>

      <section
        class="index cleanpage"
        style="column-count: 2; page: cleanpage; orphans: 3; widows: 4;"
      >
        <h2
          style="font-size:xx-large; column-span:all; font-family: Helvetica, 'Helvetica Neue', sans-serif; font-weight: bold; display: block; height: 2.5in; border-bottom: 3pt solid black; break-before: page; margin: 10mm 0; string-set: exhibit content();"
        >
          The Index: By Material
        </h2>
        {
          Object.keys(products_by_material)
            .sort((a, b) => a.localeCompare(b))
            .filter((key) => products_by_material[key].find((p) => p._rendered))
            .map((key) => (
              <>
              <div style="orphans:3; widows:3;">
                <a
                  class="font-bold mt-4"
                  xhref={`#${key}`}
                  style="color:red; border-bottom: 1px dotted black; width: 100%; display: block;"
                >
                  {key}
                </a>
                {products_by_material[key]
                  ?.filter((p) => p._rendered)
                  .map((p) => (
                    <a class="xref" href={`#${p.data.handle}`}>
                      {p.data.title}
                    </a>
                  ))}
                </div>
              </>
            ))
        }
      </section>


      <section
      class="index cleanpage"
      style="column-count: 2; page: cleanpage; orphans: 3; widows: 4;"
    >
    <h2
          style="font-size:xx-large; column-span:all; font-family: Helvetica, 'Helvetica Neue', sans-serif; font-weight: bold; display: block; height: 2.5in; border-bottom: 3pt solid black; break-before: page; margin: 10mm 0; string-set: exhibit content();"
        >
          The Index: By Picture
        </h2>

        {
          products
            .filter((p) => p._rendered)
            .sort((a,b)=> a._index - b._index)
            .map((p) => (
              <>
                <div style="break-inside: avoid; margin-bottom:0.5rem; font-size:80%; margin:0.5in 0.5in; position:relative;">
                  <div style="position:absolute; top:0; left: -0.25in; text-align:right; padding-right:0.5rem; color: red; font-weight: bold;">{p._index})</div>
                
                        <Image
                          id={`img-${p.data.handle}`}
                          width={1000}
                          height={1000}
                          src={p.data.images[0]?.src}
                          alt={p.data.title}
                          style="width:100%; border:1pt solid black; margin-bottom: 0.5rem;"
                        />
                        <a class="xref" style="border-bottom:none;" href={`#${p.data.handle}`}>{p.data.title}</a>
                </div>
                
              </>
            ))
        }

      </section>
    </main>
  </body>
</html>
